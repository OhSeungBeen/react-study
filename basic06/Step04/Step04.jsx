// Redux middleware
// 리액트 웹 애플리케이션에서 API 서버를 연동할 때 API 요청에 대한 상태를 잘 관리해야 한다.
// 예를 들어 요청이 시작되었을 때는 로딩중, 요청을 성공하거나 실패했을 때는 로딩이 끝났음을 명시해야 한다.
// 요청이 성공하면 서버에서 받아 온 응답에 대한 상태를 관리하고, 요청이 실패하면 서버에서 반환한 에러를 관리해야 한다.
// 비동기 작업을 관리해야 한다면, 미들웨어를 사용하여 효율적으로 편하게 상태를 관리 할 수 있다.

// 미들웨어는 액션을 디스패치 했을 때 리듀서에서 이를 처리하기전에 앞서 사전에 지정한 작업들을 실행한다.
// 미들웨어는 액션과 리듀서 사이의 중간자라고 볼 수 있다.
// 예를 들어 단순히 액션을 콘솔에 기록하거나, 전달받은 액션 정보를 기반으로 액션을 아에 취소하거나, 다른종류의 액션을
// 추가로 디스패치 할 수 있다.
// 이러한 미들웨어 속성을 사용하여 네트워크 요청과 같은  비동기 작업을 관리하면 유용하다.

// 비동기 작업을 처리할 때 도움을 주는 미들웨어
// redux-thunk: 비동기 작업을 처리할때 가장 많이 사용하는 미들웨어, 객체가 아닌 함수 형태의 액션을 디스패치할 수 있게 해 준다.
// redux-saga: 비동기 작업 관련 미들웨어 라이브러리이다. 특정 액션이 디스패치되었을때 정해진 로직에 따라 다른액션을 디스패치
// 시키는 규칙을 작성하여 비동기 작업을 처리할 수 있게 해 준다.

// 웹 요청 비동기 작업 처리하기
// API 호출할 때는 주로 Promise 기반 웹 클라이언트인 axios를 사용한다.
import React from 'react';
import CounterContainer from './containers/CounterContainer';
import ApiSampleContainer from './containers/ApiSampleContainer';

const Step04 = () => {
  return (
    <>
      <CounterContainer />
      <ApiSampleContainer />
    </>
  );
};

export default Step04;
